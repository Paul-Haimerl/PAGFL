// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// buildDiagX
arma::mat buildDiagX(const arma::mat& X, const unsigned int& N, arma::uvec& i_index, const arma::uvec& groups);
RcppExport SEXP _PAGFL_buildDiagX(SEXP XSEXP, SEXP NSEXP, SEXP i_indexSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type i_index(i_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildDiagX(X, N, i_index, groups));
    return rcpp_result_gen;
END_RCPP
}
// getAlpha
arma::mat getAlpha(const arma::mat& X, const arma::vec& y, arma::mat& Z, const std::string& method, const unsigned int& N, arma::uvec& i_index, const unsigned int& p, const arma::uvec& groups_hat);
RcppExport SEXP _PAGFL_getAlpha(SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP methodSEXP, SEXP NSEXP, SEXP i_indexSEXP, SEXP pSEXP, SEXP groups_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type i_index(i_indexSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups_hat(groups_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(getAlpha(X, y, Z, method, N, i_index, p, groups_hat));
    return rcpp_result_gen;
END_RCPP
}
// deleteObsMat
arma::mat deleteObsMat(const arma::mat& X, const unsigned int& N, arma::uvec& i_index, const bool first);
RcppExport SEXP _PAGFL_deleteObsMat(SEXP XSEXP, SEXP NSEXP, SEXP i_indexSEXP, SEXP firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type i_index(i_indexSEXP);
    Rcpp::traits::input_parameter< const bool >::type first(firstSEXP);
    rcpp_result_gen = Rcpp::wrap(deleteObsMat(X, N, i_index, first));
    return rcpp_result_gen;
END_RCPP
}
// netFE
std::vector<arma::mat> netFE(arma::vec& y, arma::mat& X, const std::string& method, const unsigned int& N, arma::uvec& i_index);
RcppExport SEXP _PAGFL_netFE(SEXP ySEXP, SEXP XSEXP, SEXP methodSEXP, SEXP NSEXP, SEXP i_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type i_index(i_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(netFE(y, X, method, N, i_index));
    return rcpp_result_gen;
END_RCPP
}
// spjCorrec
arma::mat spjCorrec(const arma::mat& alpha_mat, arma::mat& X, arma::vec& y, arma::mat& Z, const unsigned int& N, arma::uvec& i_index, const unsigned int& p, const arma::uvec& groups_hat, const std::string& method);
RcppExport SEXP _PAGFL_spjCorrec(SEXP alpha_matSEXP, SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP NSEXP, SEXP i_indexSEXP, SEXP pSEXP, SEXP groups_hatSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha_mat(alpha_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type i_index(i_indexSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups_hat(groups_hatSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(spjCorrec(alpha_mat, X, y, Z, N, i_index, p, groups_hat, method));
    return rcpp_result_gen;
END_RCPP
}
// pagfl_algo
Rcpp::List pagfl_algo(arma::vec& y, arma::mat& X, const std::string& method, arma::mat& Z, arma::uvec& i_index, const arma::uvec& t_index, const unsigned int& N, const bool& bias_correc, const double& lambda, const double& kappa, const double& min_group_frac, const unsigned int& max_iter, const double& tol_convergence, const double& tol_group, const double& varrho);
RcppExport SEXP _PAGFL_pagfl_algo(SEXP ySEXP, SEXP XSEXP, SEXP methodSEXP, SEXP ZSEXP, SEXP i_indexSEXP, SEXP t_indexSEXP, SEXP NSEXP, SEXP bias_correcSEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP min_group_fracSEXP, SEXP max_iterSEXP, SEXP tol_convergenceSEXP, SEXP tol_groupSEXP, SEXP varrhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type i_index(i_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type t_index(t_indexSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const bool& >::type bias_correc(bias_correcSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double& >::type min_group_frac(min_group_fracSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_convergence(tol_convergenceSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_group(tol_groupSEXP);
    Rcpp::traits::input_parameter< const double& >::type varrho(varrhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pagfl_algo(y, X, method, Z, i_index, t_index, N, bias_correc, lambda, kappa, min_group_frac, max_iter, tol_convergence, tol_group, varrho));
    return rcpp_result_gen;
END_RCPP
}
// IC
double IC(const Rcpp::List& estimOutput, arma::vec& y, arma::mat& X, const double& rho, const std::string& method, const unsigned int& N, arma::uvec& i_index);
RcppExport SEXP _PAGFL_IC(SEXP estimOutputSEXP, SEXP ySEXP, SEXP XSEXP, SEXP rhoSEXP, SEXP methodSEXP, SEXP NSEXP, SEXP i_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type estimOutput(estimOutputSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type i_index(i_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(IC(estimOutput, y, X, rho, method, N, i_index));
    return rcpp_result_gen;
END_RCPP
}
// dyn_pagfl_algo
Rcpp::List dyn_pagfl_algo(arma::vec& y, arma::mat& Z, const arma::mat& B, const unsigned int& d, const unsigned int& J, arma::uvec& i_index, const arma::uvec& t_index, const unsigned int N, const double& lambda, const double& kappa, const double& min_group_frac, const unsigned int& max_iter, const double& tol_convergence, const double& tol_group, const double& varrho);
RcppExport SEXP _PAGFL_dyn_pagfl_algo(SEXP ySEXP, SEXP ZSEXP, SEXP BSEXP, SEXP dSEXP, SEXP JSEXP, SEXP i_indexSEXP, SEXP t_indexSEXP, SEXP NSEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP min_group_fracSEXP, SEXP max_iterSEXP, SEXP tol_convergenceSEXP, SEXP tol_groupSEXP, SEXP varrhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type i_index(i_indexSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type t_index(t_indexSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double& >::type min_group_frac(min_group_fracSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_convergence(tol_convergenceSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_group(tol_groupSEXP);
    Rcpp::traits::input_parameter< const double& >::type varrho(varrhoSEXP);
    rcpp_result_gen = Rcpp::wrap(dyn_pagfl_algo(y, Z, B, d, J, i_index, t_index, N, lambda, kappa, min_group_frac, max_iter, tol_convergence, tol_group, varrho));
    return rcpp_result_gen;
END_RCPP
}
// getDynAlpha
arma::cube getDynAlpha(const arma::mat& xi, const unsigned int& K_hat, const unsigned int& p, const unsigned int& n_periods, const arma::mat& B);
RcppExport SEXP _PAGFL_getDynAlpha(SEXP xiSEXP, SEXP K_hatSEXP, SEXP pSEXP, SEXP n_periodsSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type K_hat(K_hatSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type n_periods(n_periodsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(getDynAlpha(xi, K_hat, p, n_periods, B));
    return rcpp_result_gen;
END_RCPP
}
// buildZ
arma::mat buildZ(const arma::mat& X, const arma::mat& B, const arma::uvec& t_index, const unsigned int& J, const unsigned int& d, const unsigned int& p);
RcppExport SEXP _PAGFL_buildZ(SEXP XSEXP, SEXP BSEXP, SEXP t_indexSEXP, SEXP JSEXP, SEXP dSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type t_index(t_indexSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(buildZ(X, B, t_index, J, d, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PAGFL_buildDiagX", (DL_FUNC) &_PAGFL_buildDiagX, 4},
    {"_PAGFL_getAlpha", (DL_FUNC) &_PAGFL_getAlpha, 8},
    {"_PAGFL_deleteObsMat", (DL_FUNC) &_PAGFL_deleteObsMat, 4},
    {"_PAGFL_netFE", (DL_FUNC) &_PAGFL_netFE, 5},
    {"_PAGFL_spjCorrec", (DL_FUNC) &_PAGFL_spjCorrec, 9},
    {"_PAGFL_pagfl_algo", (DL_FUNC) &_PAGFL_pagfl_algo, 15},
    {"_PAGFL_IC", (DL_FUNC) &_PAGFL_IC, 7},
    {"_PAGFL_dyn_pagfl_algo", (DL_FUNC) &_PAGFL_dyn_pagfl_algo, 15},
    {"_PAGFL_getDynAlpha", (DL_FUNC) &_PAGFL_getDynAlpha, 5},
    {"_PAGFL_buildZ", (DL_FUNC) &_PAGFL_buildZ, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_PAGFL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
