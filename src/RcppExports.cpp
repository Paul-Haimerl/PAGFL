// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// buildDiagX
arma::mat buildDiagX(const arma::mat& X, const unsigned int& n_periods, const unsigned int& N, const arma::uvec& groups);
RcppExport SEXP _PAGFL_buildDiagX(SEXP XSEXP, SEXP n_periodsSEXP, SEXP NSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type n_periods(n_periodsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(buildDiagX(X, n_periods, N, groups));
    return rcpp_result_gen;
END_RCPP
}
// PAGFL_Algo
Rcpp::List PAGFL_Algo(arma::vec& y, arma::mat& X, unsigned int& n_periods, const std::string& method, arma::mat& Z, const bool& bias_correc, const double& lambda, const double& kappa, const double& min_group_frac, const unsigned int& max_iter, const double& tol_convergence, const double& tol_group, const double& varrho);
RcppExport SEXP _PAGFL_PAGFL_Algo(SEXP ySEXP, SEXP XSEXP, SEXP n_periodsSEXP, SEXP methodSEXP, SEXP ZSEXP, SEXP bias_correcSEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP min_group_fracSEXP, SEXP max_iterSEXP, SEXP tol_convergenceSEXP, SEXP tol_groupSEXP, SEXP varrhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< unsigned int& >::type n_periods(n_periodsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const bool& >::type bias_correc(bias_correcSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double& >::type min_group_frac(min_group_fracSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_convergence(tol_convergenceSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_group(tol_groupSEXP);
    Rcpp::traits::input_parameter< const double& >::type varrho(varrhoSEXP);
    rcpp_result_gen = Rcpp::wrap(PAGFL_Algo(y, X, n_periods, method, Z, bias_correc, lambda, kappa, min_group_frac, max_iter, tol_convergence, tol_group, varrho));
    return rcpp_result_gen;
END_RCPP
}
// IC
double IC(const Rcpp::List& estimOutput, arma::vec& y, arma::mat& X, const double& rho, const std::string& method, unsigned int& n_periods, const unsigned int& N);
RcppExport SEXP _PAGFL_IC(SEXP estimOutputSEXP, SEXP ySEXP, SEXP XSEXP, SEXP rhoSEXP, SEXP methodSEXP, SEXP n_periodsSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type estimOutput(estimOutputSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int& >::type n_periods(n_periodsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(IC(estimOutput, y, X, rho, method, n_periods, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PAGFL_buildDiagX", (DL_FUNC) &_PAGFL_buildDiagX, 4},
    {"_PAGFL_PAGFL_Algo", (DL_FUNC) &_PAGFL_PAGFL_Algo, 13},
    {"_PAGFL_IC", (DL_FUNC) &_PAGFL_IC, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_PAGFL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
